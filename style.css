// --- عناصر الواجهة ---
const questionTextElement = document.getElementById('question-text');
const questionContainer = document.getElementById('question-container');
const otherInputModal = document.getElementById('other-input-modal');
const otherAnswerText = document.getElementById('other-answer-text');
const bodyElement = document.body;

// --- بيانات الأسئلة ---
const questions = [
    { text: "هل تستمتع بقضاء الوقت في الطبيعة؟", intensity: 'calm' },
    { text: "هل تفضل العمل بمفردك أم ضمن فريق؟", intensity: 'medium' },
    { text: "هل تؤمن بوجود حياة خارج كوكب الأرض؟", intensity: 'medium' },
    { text: "هل أنت مستعد لتغيير جذري في حياتك المهنية؟", intensity: 'intense' },
    { text: "هل تعتقد أن الذكاء الاصطناعي سيغير العالم بشكل إيجابي؟", intensity: 'intense' },
    { text: "انتهت الأسئلة! شكراً لك.", intensity: 'calm' } // سؤال النهاية
];

// --- حالة اللعبة ---
let currentQuestionIndex = 0;
let userAnswers = []; // مصفوفة لتخزين إجابات المستخدم (اختياري)

// --- الدوال ---

/**
 * يعرض السؤال الحالي ويغير الخلفية.
 */
function displayQuestion() {
    // التحقق مما إذا كانت هناك أسئلة متبقية
    if (currentQuestionIndex >= questions.length) {
        console.log("لا توجد أسئلة أخرى.");
        // يمكنك هنا عرض رسالة نهاية أو إعادة توجيه المستخدم
        questionTextElement.textContent = "انتهت الأسئلة! شكراً لك.";
        // إخفاء الأزرار عند الانتهاء
        document.querySelector('.flex.justify-center').style.display = 'none';
        updateBackground('calm'); // إعادة الخلفية لحالة هادئة
        return;
    }

    const question = questions[currentQuestionIndex];

    // إضافة تأثير الخروج قبل تغيير السؤال
    questionContainer.classList.add('exiting');

    // الانتظار حتى ينتهي تأثير الخروج ثم تحديث المحتوى
    setTimeout(() => {
        questionTextElement.textContent = question.text;
        updateBackground(question.intensity); // تحديث الخلفية

        // إزالة تأثير الخروج وإعادة العنصر للظهور
        questionContainer.classList.remove('exiting');
    }, 500); // يجب أن تتطابق هذه المدة مع مدة الانتقال في CSS
}

/**
 * يحدّث لون الخلفية بناءً على شدة السؤال.
 * @param {string} intensity - شدة السؤال ('calm', 'medium', 'intense').
 */
function updateBackground(intensity) {
    // إزالة أي فئات خلفية سابقة
    bodyElement.classList.remove('bg-calm', 'bg-medium', 'bg-intense');
    // إضافة الفئة الجديدة
    bodyElement.classList.add(`bg-${intensity}`);
}

/**
 * يعالج إجابة المستخدم وينتقل للسؤال التالي.
 * @param {string} answerType - نوع الإجابة ('yes', 'no').
 */
function handleAnswer(answerType) {
    console.log(`السؤال ${currentQuestionIndex + 1}: ${answerType}`); // تسجيل الإجابة (اختياري)
    userAnswers.push({ question: questions[currentQuestionIndex].text, answer: answerType }); // تخزين الإجابة

    // الانتقال للسؤال التالي
    currentQuestionIndex++;
    displayQuestion();
}

/**
 * يظهر النافذة المنبثقة لإدخال النص.
 */
function showOtherInput() {
    otherInputModal.classList.add('visible');
    otherAnswerText.value = ''; // مسح حقل النص السابق
    otherAnswerText.focus(); // التركيز على حقل النص
}

/**
 * يخفي النافذة المنبثقة لإدخال النص.
 */
function hideOtherInput() {
    otherInputModal.classList.remove('visible');
}

/**
 * يحفظ إجابة المستخدم من النافذة المنبثقة وينتقل للسؤال التالي.
 */
function saveOtherAnswer() {
    const answer = otherAnswerText.value.trim();
    console.log(`السؤال ${currentQuestionIndex + 1}: other - ${answer}`); // تسجيل الإجابة
    userAnswers.push({ question: questions[currentQuestionIndex].text, answer: answer || 'اخر (فارغ)' }); // تخزين الإجابة

    hideOtherInput(); // إخفاء النافذة

    // الانتقال للسؤال التالي
    currentQuestionIndex++;
    displayQuestion();
}

// --- بدء التطبيق ---
// عرض السؤال الأول عند تحميل الصفحة
window.onload = () => {
    displayQuestion();
};
